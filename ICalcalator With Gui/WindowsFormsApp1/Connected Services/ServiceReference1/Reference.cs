//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Add", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddResponse")]
        ICalcalator.Complex Add(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Add", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddResponse")]
        System.Threading.Tasks.Task<ICalcalator.Complex> AddAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Subtraction", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractionResponse")]
        ICalcalator.Complex Subtraction(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Subtraction", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractionResponse")]
        System.Threading.Tasks.Task<ICalcalator.Complex> SubtractionAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyResponse")]
        ICalcalator.Complex Multiply(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<ICalcalator.Complex> MultiplyAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Division", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DivisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ICalcalator.GreetingFault), Action="http://www.contoso.com/GreetingFault", Name="GreetingFault", Namespace="http://schemas.datacontract.org/2004/07/ICalcalator")]
        ICalcalator.Complex Division(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Division", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DivisionResponse")]
        System.Threading.Tasks.Task<ICalcalator.Complex> DivisionAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Add2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Add2Response")]
        ICalcalator.Complex Add2(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Add2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Add2Response")]
        System.Threading.Tasks.Task<ICalcalator.Complex> Add2Async(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Subtraction2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Subtraction2Response")]
        ICalcalator.Complex Subtraction2(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Subtraction2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Subtraction2Response")]
        System.Threading.Tasks.Task<ICalcalator.Complex> Subtraction2Async(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply2Response")]
        ICalcalator.Complex Multiply2(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Multiply2Response")]
        System.Threading.Tasks.Task<ICalcalator.Complex> Multiply2Async(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Division2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Division2Response")]
        ICalcalator.Complex Division2(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Division2", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/Division2Response")]
        System.Threading.Tasks.Task<ICalcalator.Complex> Division2Async(double Value1, double Value2, double Value3, double Value4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/GetValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/GetValueResponse")]
        string GetValue(ICalcalator.Complex complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/GetValue", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/GetValueResponse")]
        System.Threading.Tasks.Task<string> GetValueAsync(ICalcalator.Complex complex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : WindowsFormsApp1.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<WindowsFormsApp1.ServiceReference1.ICalculator>, WindowsFormsApp1.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ICalcalator.Complex Add(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.Add(Value1, Value2);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> AddAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.AddAsync(Value1, Value2);
        }
        
        public ICalcalator.Complex Subtraction(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.Subtraction(Value1, Value2);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> SubtractionAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.SubtractionAsync(Value1, Value2);
        }
        
        public ICalcalator.Complex Multiply(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.Multiply(Value1, Value2);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> MultiplyAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.MultiplyAsync(Value1, Value2);
        }
        
        public ICalcalator.Complex Division(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.Division(Value1, Value2);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> DivisionAsync(ICalcalator.Complex Value1, ICalcalator.Complex Value2) {
            return base.Channel.DivisionAsync(Value1, Value2);
        }
        
        public ICalcalator.Complex Add2(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Add2(Value1, Value2, Value3, Value4);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> Add2Async(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Add2Async(Value1, Value2, Value3, Value4);
        }
        
        public ICalcalator.Complex Subtraction2(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Subtraction2(Value1, Value2, Value3, Value4);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> Subtraction2Async(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Subtraction2Async(Value1, Value2, Value3, Value4);
        }
        
        public ICalcalator.Complex Multiply2(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Multiply2(Value1, Value2, Value3, Value4);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> Multiply2Async(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Multiply2Async(Value1, Value2, Value3, Value4);
        }
        
        public ICalcalator.Complex Division2(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Division2(Value1, Value2, Value3, Value4);
        }
        
        public System.Threading.Tasks.Task<ICalcalator.Complex> Division2Async(double Value1, double Value2, double Value3, double Value4) {
            return base.Channel.Division2Async(Value1, Value2, Value3, Value4);
        }
        
        public string GetValue(ICalcalator.Complex complex) {
            return base.Channel.GetValue(complex);
        }
        
        public System.Threading.Tasks.Task<string> GetValueAsync(ICalcalator.Complex complex) {
            return base.Channel.GetValueAsync(complex);
        }
    }
}
