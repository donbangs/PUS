//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Covid.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CovidPerson", Namespace="http://schemas.datacontract.org/2004/07/CovidService")]
    public enum CovidPerson : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Infected = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContactWithInfected = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonWithCovid", Namespace="http://schemas.datacontract.org/2004/07/CovidService")]
    [System.SerializableAttribute()]
    public partial class PersonWithCovid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateSymptomsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Covid.ServiceReference1.CovidPerson TypePersonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateContact {
            get {
                return this.DateContactField;
            }
            set {
                if ((object.ReferenceEquals(this.DateContactField, value) != true)) {
                    this.DateContactField = value;
                    this.RaisePropertyChanged("DateContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateSymptoms {
            get {
                return this.DateSymptomsField;
            }
            set {
                if ((object.ReferenceEquals(this.DateSymptomsField, value) != true)) {
                    this.DateSymptomsField = value;
                    this.RaisePropertyChanged("DateSymptoms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTest {
            get {
                return this.DateTestField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTestField, value) != true)) {
                    this.DateTestField = value;
                    this.RaisePropertyChanged("DateTest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Town {
            get {
                return this.TownField;
            }
            set {
                if ((object.ReferenceEquals(this.TownField, value) != true)) {
                    this.TownField = value;
                    this.RaisePropertyChanged("Town");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Covid.ServiceReference1.CovidPerson TypePerson {
            get {
                return this.TypePersonField;
            }
            set {
                if ((this.TypePersonField.Equals(value) != true)) {
                    this.TypePersonField = value;
                    this.RaisePropertyChanged("TypePerson");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICovidService")]
    public interface ICovidService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/AddInfected", ReplyAction="http://tempuri.org/ICovidService/AddInfectedResponse")]
        void AddInfected(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datesymptoms, string datetest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/AddInfected", ReplyAction="http://tempuri.org/ICovidService/AddInfectedResponse")]
        System.Threading.Tasks.Task AddInfectedAsync(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datesymptoms, string datetest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/AddContact", ReplyAction="http://tempuri.org/ICovidService/AddContactResponse")]
        void AddContact(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datecontact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/AddContact", ReplyAction="http://tempuri.org/ICovidService/AddContactResponse")]
        System.Threading.Tasks.Task AddContactAsync(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datecontact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/GetInfected", ReplyAction="http://tempuri.org/ICovidService/GetInfectedResponse")]
        Covid.ServiceReference1.PersonWithCovid GetInfected();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/GetInfected", ReplyAction="http://tempuri.org/ICovidService/GetInfectedResponse")]
        System.Threading.Tasks.Task<Covid.ServiceReference1.PersonWithCovid> GetInfectedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/GetContacts", ReplyAction="http://tempuri.org/ICovidService/GetContactsResponse")]
        Covid.ServiceReference1.PersonWithCovid[] GetContacts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/GetContacts", ReplyAction="http://tempuri.org/ICovidService/GetContactsResponse")]
        System.Threading.Tasks.Task<Covid.ServiceReference1.PersonWithCovid[]> GetContactsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/EndSession", ReplyAction="http://tempuri.org/ICovidService/EndSessionResponse")]
        Covid.ServiceReference1.PersonWithCovid[] EndSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/EndSession", ReplyAction="http://tempuri.org/ICovidService/EndSessionResponse")]
        System.Threading.Tasks.Task<Covid.ServiceReference1.PersonWithCovid[]> EndSessionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICovidServiceChannel : Covid.ServiceReference1.ICovidService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CovidServiceClient : System.ServiceModel.ClientBase<Covid.ServiceReference1.ICovidService>, Covid.ServiceReference1.ICovidService {
        
        public CovidServiceClient() {
        }
        
        public CovidServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CovidServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CovidServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CovidServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddInfected(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datesymptoms, string datetest) {
            base.Channel.AddInfected(covidPerson, name, town, datesymptoms, datetest);
        }
        
        public System.Threading.Tasks.Task AddInfectedAsync(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datesymptoms, string datetest) {
            return base.Channel.AddInfectedAsync(covidPerson, name, town, datesymptoms, datetest);
        }
        
        public void AddContact(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datecontact) {
            base.Channel.AddContact(covidPerson, name, town, datecontact);
        }
        
        public System.Threading.Tasks.Task AddContactAsync(Covid.ServiceReference1.CovidPerson covidPerson, string name, string town, string datecontact) {
            return base.Channel.AddContactAsync(covidPerson, name, town, datecontact);
        }
        
        public Covid.ServiceReference1.PersonWithCovid GetInfected() {
            return base.Channel.GetInfected();
        }
        
        public System.Threading.Tasks.Task<Covid.ServiceReference1.PersonWithCovid> GetInfectedAsync() {
            return base.Channel.GetInfectedAsync();
        }
        
        public Covid.ServiceReference1.PersonWithCovid[] GetContacts() {
            return base.Channel.GetContacts();
        }
        
        public System.Threading.Tasks.Task<Covid.ServiceReference1.PersonWithCovid[]> GetContactsAsync() {
            return base.Channel.GetContactsAsync();
        }
        
        public Covid.ServiceReference1.PersonWithCovid[] EndSession() {
            return base.Channel.EndSession();
        }
        
        public System.Threading.Tasks.Task<Covid.ServiceReference1.PersonWithCovid[]> EndSessionAsync() {
            return base.Channel.EndSessionAsync();
        }
    }
}
